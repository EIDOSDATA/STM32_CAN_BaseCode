
CAN_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002384  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002444  08002444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002474  08002474  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002474  08002474  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002474  08002474  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002474  08002474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800247c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002488  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002488  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004752  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001025  00000000  00000000  00024786  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004c0  00000000  00000000  000257b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000428  00000000  00000000  00025c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013806  00000000  00000000  00026098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000047ec  00000000  00000000  0003989e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ac07  00000000  00000000  0003e08a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8c91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f60  00000000  00000000  000a8d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800242c 	.word	0x0800242c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800242c 	.word	0x0800242c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CAN1_User_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CAN1_User_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef canFilter;

	canFilter.FilterBank = 0;
 8000226:	003b      	movs	r3, r7
 8000228:	2200      	movs	r2, #0
 800022a:	615a      	str	r2, [r3, #20]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800022c:	003b      	movs	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	619a      	str	r2, [r3, #24]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000232:	003b      	movs	r3, r7
 8000234:	2201      	movs	r2, #1
 8000236:	61da      	str	r2, [r3, #28]
	canFilter.FilterIdHigh = 0x0000 << 5;
 8000238:	003b      	movs	r3, r7
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
	canFilter.FilterIdLow = 0x0000;
 800023e:	003b      	movs	r3, r7
 8000240:	2200      	movs	r2, #0
 8000242:	605a      	str	r2, [r3, #4]
	canFilter.FilterMaskIdHigh = 0x0000 << 5;
 8000244:	003b      	movs	r3, r7
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
	canFilter.FilterMaskIdLow = 0x0000;
 800024a:	003b      	movs	r3, r7
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
	canFilter.FilterFIFOAssignment = 0;
 8000250:	003b      	movs	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
	canFilter.FilterActivation = ENABLE;
 8000256:	003b      	movs	r3, r7
 8000258:	2201      	movs	r2, #1
 800025a:	621a      	str	r2, [r3, #32]
	canFilter.SlaveStartFilterBank = 0;
 800025c:	003b      	movs	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &canFilter) != HAL_OK) {
 8000262:	003a      	movs	r2, r7
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <CAN1_User_Init+0x7c>)
 8000266:	0011      	movs	r1, r2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fbb1 	bl	80009d0 <HAL_CAN_ConfigFilter>
 800026e:	1e03      	subs	r3, r0, #0
 8000270:	d001      	beq.n	8000276 <CAN1_User_Init+0x56>
		Error_Handler();
 8000272:	f000 f93b 	bl	80004ec <Error_Handler>
	}

	canTxHeader.StdId = 0x01;
 8000276:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <CAN1_User_Init+0x80>)
 8000278:	2201      	movs	r2, #1
 800027a:	601a      	str	r2, [r3, #0]
	canTxHeader.ExtId = 0x01;
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <CAN1_User_Init+0x80>)
 800027e:	2201      	movs	r2, #1
 8000280:	605a      	str	r2, [r3, #4]
	canTxHeader.RTR = CAN_RTR_DATA;
 8000282:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <CAN1_User_Init+0x80>)
 8000284:	2200      	movs	r2, #0
 8000286:	60da      	str	r2, [r3, #12]
	canTxHeader.IDE = CAN_ID_STD;
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <CAN1_User_Init+0x80>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
	canTxHeader.DLC = 8;
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <CAN1_User_Init+0x80>)
 8000290:	2208      	movs	r2, #8
 8000292:	611a      	str	r2, [r3, #16]
}
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	b00a      	add	sp, #40	; 0x28
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000004c 	.word	0x2000004c
 80002a0:	20000028 	.word	0x20000028

080002a4 <CAN1_Tx>:

void CAN1_Tx(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	canTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80002aa:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <CAN1_Tx+0x4c>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fda6 	bl	8000dfe <HAL_CAN_GetTxMailboxesFreeLevel>
 80002b2:	0002      	movs	r2, r0
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <CAN1_Tx+0x50>)
 80002b6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 80002b8:	2300      	movs	r3, #0
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	e00b      	b.n	80002d6 <CAN1_Tx+0x32>
		canTxData[i] = i + 1;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	3301      	adds	r3, #1
 80002c4:	b2d9      	uxtb	r1, r3
 80002c6:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <CAN1_Tx+0x54>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	18d3      	adds	r3, r2, r3
 80002cc:	1c0a      	adds	r2, r1, #0
 80002ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2b07      	cmp	r3, #7
 80002da:	ddf0      	ble.n	80002be <CAN1_Tx+0x1a>
	}
	HAL_CAN_AddTxMessage(&hcan, &canTxHeader, canTxData, &canTxMailBox);
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <CAN1_Tx+0x50>)
 80002de:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <CAN1_Tx+0x54>)
 80002e0:	4906      	ldr	r1, [pc, #24]	; (80002fc <CAN1_Tx+0x58>)
 80002e2:	4803      	ldr	r0, [pc, #12]	; (80002f0 <CAN1_Tx+0x4c>)
 80002e4:	f000 fcac 	bl	8000c40 <HAL_CAN_AddTxMessage>
}
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b002      	add	sp, #8
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000004c 	.word	0x2000004c
 80002f4:	20000040 	.word	0x20000040
 80002f8:	20000044 	.word	0x20000044
 80002fc:	20000028 	.word	0x20000028

08000300 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]

	canRxHeader.StdId = 0;         //clear
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, &canRxData[0]);
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	2100      	movs	r1, #0
 8000316:	f000 fdaa 	bl	8000e6e <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800031c:	2108      	movs	r1, #8
 800031e:	0018      	movs	r0, r3
 8000320:	f001 fb5f 	bl	80019e2 <HAL_GPIO_TogglePin>
}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	b002      	add	sp, #8
 800032a:	bd80      	pop	{r7, pc}
 800032c:	2000007c 	.word	0x2000007c
 8000330:	20000074 	.word	0x20000074
 8000334:	48000400 	.word	0x48000400

08000338 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800033c:	f000 f9c4 	bl	80006c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000340:	f000 f818 	bl	8000374 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000344:	f000 f88a 	bl	800045c <MX_GPIO_Init>
	MX_CAN_Init();
 8000348:	f000 f850 	bl	80003ec <MX_CAN_Init>
	/* USER CODE BEGIN 2 */

	HAL_CAN_Start(&hcan);
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <main+0x38>)
 800034e:	0018      	movs	r0, r3
 8000350:	f000 fc30 	bl	8000bb4 <HAL_CAN_Start>
	CAN1_User_Init();
 8000354:	f7ff ff64 	bl	8000220 <CAN1_User_Init>
	HAL_CAN_ActivateNotification(&hcan,
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <main+0x38>)
 800035a:	2112      	movs	r1, #18
 800035c:	0018      	movs	r0, r3
 800035e:	f000 fea2 	bl	80010a6 <HAL_CAN_ActivateNotification>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		CAN1_Tx();
 8000362:	f7ff ff9f 	bl	80002a4 <CAN1_Tx>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_Delay(100);
 8000366:	2064      	movs	r0, #100	; 0x64
 8000368:	f000 fa12 	bl	8000790 <HAL_Delay>
		CAN1_Tx();
 800036c:	e7f9      	b.n	8000362 <main+0x2a>
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	2000004c 	.word	0x2000004c

08000374 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b093      	sub	sp, #76	; 0x4c
 8000378:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800037a:	2414      	movs	r4, #20
 800037c:	193b      	adds	r3, r7, r4
 800037e:	0018      	movs	r0, r3
 8000380:	2334      	movs	r3, #52	; 0x34
 8000382:	001a      	movs	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	f002 f849 	bl	800241c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	0018      	movs	r0, r3
 800038e:	2310      	movs	r3, #16
 8000390:	001a      	movs	r2, r3
 8000392:	2100      	movs	r1, #0
 8000394:	f002 f842 	bl	800241c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000398:	193b      	adds	r3, r7, r4
 800039a:	2220      	movs	r2, #32
 800039c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800039e:	193b      	adds	r3, r7, r4
 80003a0:	2201      	movs	r2, #1
 80003a2:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	2200      	movs	r2, #0
 80003a8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 fb33 	bl	8001a18 <HAL_RCC_OscConfig>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x46>
		Error_Handler();
 80003b6:	f000 f899 	bl	80004ec <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2207      	movs	r2, #7
 80003be:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2203      	movs	r2, #3
 80003c4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2101      	movs	r1, #1
 80003d6:	0018      	movs	r0, r3
 80003d8:	f001 fea4 	bl	8002124 <HAL_RCC_ClockConfig>
 80003dc:	1e03      	subs	r3, r0, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x70>
		Error_Handler();
 80003e0:	f000 f884 	bl	80004ec <Error_Handler>
	}
}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b013      	add	sp, #76	; 0x4c
 80003ea:	bd90      	pop	{r4, r7, pc}

080003ec <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 80003f0:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_CAN_Init+0x68>)
 80003f2:	4a19      	ldr	r2, [pc, #100]	; (8000458 <MX_CAN_Init+0x6c>)
 80003f4:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 3;
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_CAN_Init+0x68>)
 80003f8:	2203      	movs	r2, #3
 80003fa:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_CAN_Init+0x68>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_CAN_Init+0x68>)
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_CAN_Init+0x68>)
 800040a:	22c0      	movs	r2, #192	; 0xc0
 800040c:	0312      	lsls	r2, r2, #12
 800040e:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000410:	4b10      	ldr	r3, [pc, #64]	; (8000454 <MX_CAN_Init+0x68>)
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	0352      	lsls	r2, r2, #13
 8000416:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_CAN_Init+0x68>)
 800041a:	2200      	movs	r2, #0
 800041c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <MX_CAN_Init+0x68>)
 8000420:	2200      	movs	r2, #0
 8000422:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <MX_CAN_Init+0x68>)
 8000426:	2200      	movs	r2, #0
 8000428:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <MX_CAN_Init+0x68>)
 800042c:	2200      	movs	r2, #0
 800042e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_CAN_Init+0x68>)
 8000432:	2200      	movs	r2, #0
 8000434:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <MX_CAN_Init+0x68>)
 8000438:	2200      	movs	r2, #0
 800043a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <MX_CAN_Init+0x68>)
 800043e:	0018      	movs	r0, r3
 8000440:	f000 f9c8 	bl	80007d4 <HAL_CAN_Init>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d001      	beq.n	800044c <MX_CAN_Init+0x60>
		Error_Handler();
 8000448:	f000 f850 	bl	80004ec <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	2000004c 	.word	0x2000004c
 8000458:	40006400 	.word	0x40006400

0800045c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b089      	sub	sp, #36	; 0x24
 8000460:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000462:	240c      	movs	r4, #12
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2314      	movs	r3, #20
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f001 ffd5 	bl	800241c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <MX_GPIO_Init+0x88>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <MX_GPIO_Init+0x88>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0289      	lsls	r1, r1, #10
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_GPIO_Init+0x88>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	029b      	lsls	r3, r3, #10
 8000488:	4013      	ands	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <MX_GPIO_Init+0x88>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_GPIO_Init+0x88>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	02c9      	lsls	r1, r1, #11
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_GPIO_Init+0x88>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	02db      	lsls	r3, r3, #11
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_GPIO_Init+0x8c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	2108      	movs	r1, #8
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fa79 	bl	80019a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80004b6:	0021      	movs	r1, r4
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2208      	movs	r2, #8
 80004bc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2201      	movs	r2, #1
 80004c2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2203      	movs	r2, #3
 80004ce:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <MX_GPIO_Init+0x8c>)
 80004d4:	0019      	movs	r1, r3
 80004d6:	0010      	movs	r0, r2
 80004d8:	f001 f8fe 	bl	80016d8 <HAL_GPIO_Init>

}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b009      	add	sp, #36	; 0x24
 80004e2:	bd90      	pop	{r4, r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	48000400 	.word	0x48000400

080004ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <HAL_MspInit+0x44>)
 8000500:	699a      	ldr	r2, [r3, #24]
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_MspInit+0x44>)
 8000504:	2101      	movs	r1, #1
 8000506:	430a      	orrs	r2, r1
 8000508:	619a      	str	r2, [r3, #24]
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <HAL_MspInit+0x44>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	2201      	movs	r2, #1
 8000510:	4013      	ands	r3, r2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_MspInit+0x44>)
 8000518:	69da      	ldr	r2, [r3, #28]
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_MspInit+0x44>)
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	0549      	lsls	r1, r1, #21
 8000520:	430a      	orrs	r2, r1
 8000522:	61da      	str	r2, [r3, #28]
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <HAL_MspInit+0x44>)
 8000526:	69da      	ldr	r2, [r3, #28]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	055b      	lsls	r3, r3, #21
 800052c:	4013      	ands	r3, r2
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b002      	add	sp, #8
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	2314      	movs	r3, #20
 800054a:	18fb      	adds	r3, r7, r3
 800054c:	0018      	movs	r0, r3
 800054e:	2314      	movs	r3, #20
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f001 ff62 	bl	800241c <memset>
  if(hcan->Instance==CAN)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a20      	ldr	r2, [pc, #128]	; (80005e0 <HAL_CAN_MspInit+0xa0>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d13a      	bne.n	80005d8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <HAL_CAN_MspInit+0xa4>)
 8000564:	69da      	ldr	r2, [r3, #28]
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <HAL_CAN_MspInit+0xa4>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	0489      	lsls	r1, r1, #18
 800056c:	430a      	orrs	r2, r1
 800056e:	61da      	str	r2, [r3, #28]
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <HAL_CAN_MspInit+0xa4>)
 8000572:	69da      	ldr	r2, [r3, #28]
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	049b      	lsls	r3, r3, #18
 8000578:	4013      	ands	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <HAL_CAN_MspInit+0xa4>)
 8000580:	695a      	ldr	r2, [r3, #20]
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <HAL_CAN_MspInit+0xa4>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	02c9      	lsls	r1, r1, #11
 8000588:	430a      	orrs	r2, r1
 800058a:	615a      	str	r2, [r3, #20]
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <HAL_CAN_MspInit+0xa4>)
 800058e:	695a      	ldr	r2, [r3, #20]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	02db      	lsls	r3, r3, #11
 8000594:	4013      	ands	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800059a:	2114      	movs	r1, #20
 800059c:	187b      	adds	r3, r7, r1
 800059e:	22c0      	movs	r2, #192	; 0xc0
 80005a0:	0092      	lsls	r2, r2, #2
 80005a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2202      	movs	r2, #2
 80005a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2203      	movs	r2, #3
 80005b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2204      	movs	r2, #4
 80005ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <HAL_CAN_MspInit+0xa8>)
 80005c0:	0019      	movs	r1, r3
 80005c2:	0010      	movs	r0, r2
 80005c4:	f001 f888 	bl	80016d8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	201e      	movs	r0, #30
 80005ce:	f001 f851 	bl	8001674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80005d2:	201e      	movs	r0, #30
 80005d4:	f001 f863 	bl	800169e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b00a      	add	sp, #40	; 0x28
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40006400 	.word	0x40006400
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000614:	f000 f8a0 	bl	8000758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <CEC_CAN_IRQHandler+0x14>)
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fd67 	bl	80010fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	2000004c 	.word	0x2000004c

08000638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000644:	4813      	ldr	r0, [pc, #76]	; (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000646:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000648:	4813      	ldr	r0, [pc, #76]	; (8000698 <LoopForever+0x6>)
    LDR R1, [R0]
 800064a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800064c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800064e:	4a13      	ldr	r2, [pc, #76]	; (800069c <LoopForever+0xa>)
    CMP R1, R2
 8000650:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000652:	d105      	bne.n	8000660 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000654:	4812      	ldr	r0, [pc, #72]	; (80006a0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000656:	4913      	ldr	r1, [pc, #76]	; (80006a4 <LoopForever+0x12>)
    STR R1, [R0]
 8000658:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800065a:	4813      	ldr	r0, [pc, #76]	; (80006a8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800065c:	4913      	ldr	r1, [pc, #76]	; (80006ac <LoopForever+0x1a>)
    STR R1, [R0]
 800065e:	6001      	str	r1, [r0, #0]

08000660 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000660:	4813      	ldr	r0, [pc, #76]	; (80006b0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000662:	4914      	ldr	r1, [pc, #80]	; (80006b4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <LoopForever+0x26>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000678:	4c11      	ldr	r4, [pc, #68]	; (80006c0 <LoopForever+0x2e>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000686:	f7ff ffd7 	bl	8000638 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800068a:	f001 fea3 	bl	80023d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fe53 	bl	8000338 <main>

08000692 <LoopForever>:

LoopForever:
    b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000698:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800069c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80006a0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80006a4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80006a8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80006ac:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b8:	0800247c 	.word	0x0800247c
  ldr r2, =_sbss
 80006bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c0:	2000009c 	.word	0x2000009c

080006c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC1_IRQHandler>
	...

080006c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <HAL_Init+0x24>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_Init+0x24>)
 80006d2:	2110      	movs	r1, #16
 80006d4:	430a      	orrs	r2, r1
 80006d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f809 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006de:	f7ff ff0b 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40022000 	.word	0x40022000

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_InitTick+0x5c>)
 80006fa:	681c      	ldr	r4, [r3, #0]
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <HAL_InitTick+0x60>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	0019      	movs	r1, r3
 8000702:	23fa      	movs	r3, #250	; 0xfa
 8000704:	0098      	lsls	r0, r3, #2
 8000706:	f7ff fcff 	bl	8000108 <__udivsi3>
 800070a:	0003      	movs	r3, r0
 800070c:	0019      	movs	r1, r3
 800070e:	0020      	movs	r0, r4
 8000710:	f7ff fcfa 	bl	8000108 <__udivsi3>
 8000714:	0003      	movs	r3, r0
 8000716:	0018      	movs	r0, r3
 8000718:	f000 ffd1 	bl	80016be <HAL_SYSTICK_Config>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	e00f      	b.n	8000744 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b03      	cmp	r3, #3
 8000728:	d80b      	bhi.n	8000742 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	2301      	movs	r3, #1
 800072e:	425b      	negs	r3, r3
 8000730:	2200      	movs	r2, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f000 ff9e 	bl	8001674 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_InitTick+0x64>)
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b003      	add	sp, #12
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_IncTick+0x1c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	001a      	movs	r2, r3
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x20>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	18d2      	adds	r2, r2, r3
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <HAL_IncTick+0x20>)
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	20000008 	.word	0x20000008
 8000778:	20000098 	.word	0x20000098

0800077c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <HAL_GetTick+0x10>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000098 	.word	0x20000098

08000790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000798:	f7ff fff0 	bl	800077c <HAL_GetTick>
 800079c:	0003      	movs	r3, r0
 800079e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3301      	adds	r3, #1
 80007a8:	d005      	beq.n	80007b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_Delay+0x40>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	001a      	movs	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	189b      	adds	r3, r3, r2
 80007b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	f7ff ffe0 	bl	800077c <HAL_GetTick>
 80007bc:	0002      	movs	r2, r0
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d8f7      	bhi.n	80007b8 <HAL_Delay+0x28>
  {
  }
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b004      	add	sp, #16
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000008 	.word	0x20000008

080007d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e0f0      	b.n	80009c8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2220      	movs	r2, #32
 80007ea:	5c9b      	ldrb	r3, [r3, r2]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d103      	bne.n	80007fa <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff fea3 	bl	8000540 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2102      	movs	r1, #2
 8000806:	438a      	bics	r2, r1
 8000808:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800080a:	f7ff ffb7 	bl	800077c <HAL_GetTick>
 800080e:	0003      	movs	r3, r0
 8000810:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000812:	e013      	b.n	800083c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000814:	f7ff ffb2 	bl	800077c <HAL_GetTick>
 8000818:	0002      	movs	r2, r0
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	2b0a      	cmp	r3, #10
 8000820:	d90c      	bls.n	800083c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	0292      	lsls	r2, r2, #10
 800082a:	431a      	orrs	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2220      	movs	r2, #32
 8000834:	2105      	movs	r1, #5
 8000836:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	e0c5      	b.n	80009c8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2202      	movs	r2, #2
 8000844:	4013      	ands	r3, r2
 8000846:	d1e5      	bne.n	8000814 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2101      	movs	r1, #1
 8000854:	430a      	orrs	r2, r1
 8000856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000858:	f7ff ff90 	bl	800077c <HAL_GetTick>
 800085c:	0003      	movs	r3, r0
 800085e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000860:	e013      	b.n	800088a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000862:	f7ff ff8b 	bl	800077c <HAL_GetTick>
 8000866:	0002      	movs	r2, r0
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	2b0a      	cmp	r3, #10
 800086e:	d90c      	bls.n	800088a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	0292      	lsls	r2, r2, #10
 8000878:	431a      	orrs	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2220      	movs	r2, #32
 8000882:	2105      	movs	r1, #5
 8000884:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e09e      	b.n	80009c8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2201      	movs	r2, #1
 8000892:	4013      	ands	r3, r2
 8000894:	d0e5      	beq.n	8000862 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7e1b      	ldrb	r3, [r3, #24]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d108      	bne.n	80008b0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	430a      	orrs	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e007      	b.n	80008c0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2180      	movs	r1, #128	; 0x80
 80008bc:	438a      	bics	r2, r1
 80008be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7e5b      	ldrb	r3, [r3, #25]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d108      	bne.n	80008da <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2140      	movs	r1, #64	; 0x40
 80008d4:	430a      	orrs	r2, r1
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	e007      	b.n	80008ea <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	438a      	bics	r2, r1
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7e9b      	ldrb	r3, [r3, #26]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d108      	bne.n	8000904 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2120      	movs	r1, #32
 80008fe:	430a      	orrs	r2, r1
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	e007      	b.n	8000914 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2120      	movs	r1, #32
 8000910:	438a      	bics	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7edb      	ldrb	r3, [r3, #27]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d108      	bne.n	800092e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2110      	movs	r1, #16
 8000928:	438a      	bics	r2, r1
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	e007      	b.n	800093e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2110      	movs	r1, #16
 800093a:	430a      	orrs	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7f1b      	ldrb	r3, [r3, #28]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d108      	bne.n	8000958 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2108      	movs	r1, #8
 8000952:	430a      	orrs	r2, r1
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e007      	b.n	8000968 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2108      	movs	r1, #8
 8000964:	438a      	bics	r2, r1
 8000966:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7f5b      	ldrb	r3, [r3, #29]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d108      	bne.n	8000982 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2104      	movs	r1, #4
 800097c:	430a      	orrs	r2, r1
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	e007      	b.n	8000992 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2104      	movs	r1, #4
 800098e:	438a      	bics	r2, r1
 8000990:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	431a      	orrs	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	431a      	orrs	r2, r3
 80009a8:	0011      	movs	r1, r2
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2220      	movs	r2, #32
 80009c2:	2101      	movs	r1, #1
 80009c4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b004      	add	sp, #16
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009e0:	2013      	movs	r0, #19
 80009e2:	183b      	adds	r3, r7, r0
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	2120      	movs	r1, #32
 80009e8:	5c52      	ldrb	r2, [r2, r1]
 80009ea:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80009ec:	183b      	adds	r3, r7, r0
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d005      	beq.n	8000a00 <HAL_CAN_ConfigFilter+0x30>
 80009f4:	2313      	movs	r3, #19
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d000      	beq.n	8000a00 <HAL_CAN_ConfigFilter+0x30>
 80009fe:	e0cd      	b.n	8000b9c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	58d3      	ldr	r3, [r2, r3]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	697a      	ldr	r2, [r7, #20]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	221f      	movs	r2, #31
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2201      	movs	r2, #1
 8000a20:	409a      	lsls	r2, r3
 8000a22:	0013      	movs	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	2387      	movs	r3, #135	; 0x87
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	58d3      	ldr	r3, [r2, r3]
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	43d2      	mvns	r2, r2
 8000a32:	401a      	ands	r2, r3
 8000a34:	0011      	movs	r1, r2
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	2387      	movs	r3, #135	; 0x87
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d129      	bne.n	8000a9a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	2383      	movs	r3, #131	; 0x83
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	58d3      	ldr	r3, [r2, r3]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	43d2      	mvns	r2, r2
 8000a52:	401a      	ands	r2, r3
 8000a54:	0011      	movs	r1, r2
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	2383      	movs	r3, #131	; 0x83
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	041b      	lsls	r3, r3, #16
 8000a6a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a70:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3248      	adds	r2, #72	; 0x48
 8000a76:	00d2      	lsls	r2, r2, #3
 8000a78:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	041b      	lsls	r3, r3, #16
 8000a86:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a8e:	6979      	ldr	r1, [r7, #20]
 8000a90:	3348      	adds	r3, #72	; 0x48
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	18cb      	adds	r3, r1, r3
 8000a96:	3304      	adds	r3, #4
 8000a98:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d128      	bne.n	8000af4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	2383      	movs	r3, #131	; 0x83
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	58d2      	ldr	r2, [r2, r3]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	0011      	movs	r1, r2
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	2383      	movs	r3, #131	; 0x83
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	041b      	lsls	r3, r3, #16
 8000ac4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000aca:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3248      	adds	r2, #72	; 0x48
 8000ad0:	00d2      	lsls	r2, r2, #3
 8000ad2:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	041b      	lsls	r3, r3, #16
 8000ae0:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ae6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ae8:	6979      	ldr	r1, [r7, #20]
 8000aea:	3348      	adds	r3, #72	; 0x48
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	18cb      	adds	r3, r1, r3
 8000af0:	3304      	adds	r3, #4
 8000af2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10c      	bne.n	8000b16 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	2381      	movs	r3, #129	; 0x81
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	58d3      	ldr	r3, [r2, r3]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	43d2      	mvns	r2, r2
 8000b08:	401a      	ands	r2, r3
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	2381      	movs	r3, #129	; 0x81
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	50d1      	str	r1, [r2, r3]
 8000b14:	e00a      	b.n	8000b2c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	2381      	movs	r3, #129	; 0x81
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	58d2      	ldr	r2, [r2, r3]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	431a      	orrs	r2, r3
 8000b22:	0011      	movs	r1, r2
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	2381      	movs	r3, #129	; 0x81
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	691b      	ldr	r3, [r3, #16]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10c      	bne.n	8000b4e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	2385      	movs	r3, #133	; 0x85
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	58d3      	ldr	r3, [r2, r3]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	43d2      	mvns	r2, r2
 8000b40:	401a      	ands	r2, r3
 8000b42:	0011      	movs	r1, r2
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	2385      	movs	r3, #133	; 0x85
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	50d1      	str	r1, [r2, r3]
 8000b4c:	e00a      	b.n	8000b64 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	2385      	movs	r3, #133	; 0x85
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	58d2      	ldr	r2, [r2, r3]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	2385      	movs	r3, #133	; 0x85
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	6a1b      	ldr	r3, [r3, #32]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d10a      	bne.n	8000b82 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	2387      	movs	r3, #135	; 0x87
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	58d2      	ldr	r2, [r2, r3]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	0011      	movs	r1, r2
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	2387      	movs	r3, #135	; 0x87
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	58d3      	ldr	r3, [r2, r3]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4393      	bics	r3, r2
 8000b8e:	0019      	movs	r1, r3
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e007      	b.n	8000bac <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	02d2      	lsls	r2, r2, #11
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
  }
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b006      	add	sp, #24
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	5c9b      	ldrb	r3, [r3, r2]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d12f      	bne.n	8000c28 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2220      	movs	r2, #32
 8000bcc:	2102      	movs	r1, #2
 8000bce:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	438a      	bics	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000be0:	f7ff fdcc 	bl	800077c <HAL_GetTick>
 8000be4:	0003      	movs	r3, r0
 8000be6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000be8:	e013      	b.n	8000c12 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bea:	f7ff fdc7 	bl	800077c <HAL_GetTick>
 8000bee:	0002      	movs	r2, r0
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	2b0a      	cmp	r3, #10
 8000bf6:	d90c      	bls.n	8000c12 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	0292      	lsls	r2, r2, #10
 8000c00:	431a      	orrs	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2220      	movs	r2, #32
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e012      	b.n	8000c38 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d1e5      	bne.n	8000bea <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	e007      	b.n	8000c38 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	0312      	lsls	r2, r2, #12
 8000c30:	431a      	orrs	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
  }
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b004      	add	sp, #16
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c4e:	201f      	movs	r0, #31
 8000c50:	183b      	adds	r3, r7, r0
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	2120      	movs	r1, #32
 8000c56:	5c52      	ldrb	r2, [r2, r1]
 8000c58:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c62:	183b      	adds	r3, r7, r0
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d005      	beq.n	8000c76 <HAL_CAN_AddTxMessage+0x36>
 8000c6a:	231f      	movs	r3, #31
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d000      	beq.n	8000c76 <HAL_CAN_AddTxMessage+0x36>
 8000c74:	e0b7      	b.n	8000de6 <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	04db      	lsls	r3, r3, #19
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	d10a      	bne.n	8000c96 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	051b      	lsls	r3, r3, #20
 8000c86:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c88:	d105      	bne.n	8000c96 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	055b      	lsls	r3, r3, #21
 8000c90:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c92:	d100      	bne.n	8000c96 <HAL_CAN_AddTxMessage+0x56>
 8000c94:	e09e      	b.n	8000dd4 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	0e1b      	lsrs	r3, r3, #24
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d908      	bls.n	8000cb8 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	0412      	lsls	r2, r2, #16
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e09e      	b.n	8000df6 <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10c      	bne.n	8000ce4 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4311      	orrs	r1, r2
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	3218      	adds	r2, #24
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	50d1      	str	r1, [r2, r3]
 8000ce2:	e00f      	b.n	8000d04 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000cfa:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	3218      	adds	r2, #24
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	6819      	ldr	r1, [r3, #0]
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	3318      	adds	r3, #24
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	18cb      	adds	r3, r1, r3
 8000d14:	3304      	adds	r3, #4
 8000d16:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	7d1b      	ldrb	r3, [r3, #20]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d112      	bne.n	8000d46 <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3318      	adds	r3, #24
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	18d3      	adds	r3, r2, r3
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6819      	ldr	r1, [r3, #0]
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3318      	adds	r3, #24
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	18cb      	adds	r3, r1, r3
 8000d42:	3304      	adds	r3, #4
 8000d44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3307      	adds	r3, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	061a      	lsls	r2, r3, #24
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3306      	adds	r3, #6
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	041b      	lsls	r3, r3, #16
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3305      	adds	r3, #5
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3304      	adds	r3, #4
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	0019      	movs	r1, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	6979      	ldr	r1, [r7, #20]
 8000d72:	23c6      	movs	r3, #198	; 0xc6
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	0109      	lsls	r1, r1, #4
 8000d78:	1841      	adds	r1, r0, r1
 8000d7a:	18cb      	adds	r3, r1, r3
 8000d7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3303      	adds	r3, #3
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	061a      	lsls	r2, r3, #24
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3302      	adds	r3, #2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	041b      	lsls	r3, r3, #16
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3301      	adds	r3, #1
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	6979      	ldr	r1, [r7, #20]
 8000da8:	23c4      	movs	r3, #196	; 0xc4
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	0109      	lsls	r1, r1, #4
 8000dae:	1841      	adds	r1, r0, r1
 8000db0:	18cb      	adds	r3, r1, r3
 8000db2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	3218      	adds	r2, #24
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	58d2      	ldr	r2, [r2, r3]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4311      	orrs	r1, r2
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	3218      	adds	r2, #24
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e010      	b.n	8000df6 <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	0392      	lsls	r2, r2, #14
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e007      	b.n	8000df6 <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	02d2      	lsls	r2, r2, #11
 8000dee:	431a      	orrs	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
  }
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b008      	add	sp, #32
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e0a:	200b      	movs	r0, #11
 8000e0c:	183b      	adds	r3, r7, r0
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	2120      	movs	r1, #32
 8000e12:	5c52      	ldrb	r2, [r2, r1]
 8000e14:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e16:	183b      	adds	r3, r7, r0
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d004      	beq.n	8000e28 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8000e1e:	230b      	movs	r3, #11
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d11d      	bne.n	8000e64 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	04db      	lsls	r3, r3, #19
 8000e32:	4013      	ands	r3, r2
 8000e34:	d002      	beq.n	8000e3c <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	051b      	lsls	r3, r3, #20
 8000e46:	4013      	ands	r3, r2
 8000e48:	d002      	beq.n	8000e50 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	055b      	lsls	r3, r3, #21
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d002      	beq.n	8000e64 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3301      	adds	r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000e64:	68fb      	ldr	r3, [r7, #12]
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b004      	add	sp, #16
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e7c:	2017      	movs	r0, #23
 8000e7e:	183b      	adds	r3, r7, r0
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	2120      	movs	r1, #32
 8000e84:	5c52      	ldrb	r2, [r2, r1]
 8000e86:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e88:	183b      	adds	r3, r7, r0
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d005      	beq.n	8000e9c <HAL_CAN_GetRxMessage+0x2e>
 8000e90:	2317      	movs	r3, #23
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d000      	beq.n	8000e9c <HAL_CAN_GetRxMessage+0x2e>
 8000e9a:	e0f8      	b.n	800108e <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d117      	bne.n	8000ede <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0392      	lsls	r2, r2, #14
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e0ee      	b.n	800109e <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d108      	bne.n	8000ede <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	0392      	lsls	r2, r2, #14
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0df      	b.n	800109e <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	321b      	adds	r2, #27
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	58d3      	ldr	r3, [r2, r3]
 8000eea:	2204      	movs	r2, #4
 8000eec:	401a      	ands	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10b      	bne.n	8000f12 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	321b      	adds	r2, #27
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	58d3      	ldr	r3, [r2, r3]
 8000f06:	0d5b      	lsrs	r3, r3, #21
 8000f08:	055b      	lsls	r3, r3, #21
 8000f0a:	0d5a      	lsrs	r2, r3, #21
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e00a      	b.n	8000f28 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	321b      	adds	r2, #27
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	58d3      	ldr	r3, [r2, r3]
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	321b      	adds	r2, #27
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	58d3      	ldr	r3, [r2, r3]
 8000f34:	2202      	movs	r2, #2
 8000f36:	401a      	ands	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	331b      	adds	r3, #27
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	18d3      	adds	r3, r2, r3
 8000f48:	3304      	adds	r3, #4
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	401a      	ands	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	331b      	adds	r3, #27
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	18d3      	adds	r3, r2, r3
 8000f60:	3304      	adds	r3, #4
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	22ff      	movs	r2, #255	; 0xff
 8000f68:	401a      	ands	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	331b      	adds	r3, #27
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	18d3      	adds	r3, r2, r3
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	0c1b      	lsrs	r3, r3, #16
 8000f80:	041b      	lsls	r3, r3, #16
 8000f82:	0c1a      	lsrs	r2, r3, #16
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6819      	ldr	r1, [r3, #0]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	23dc      	movs	r3, #220	; 0xdc
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	188a      	adds	r2, r1, r2
 8000f96:	18d3      	adds	r3, r2, r3
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	23dc      	movs	r3, #220	; 0xdc
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	188a      	adds	r2, r1, r2
 8000fae:	18d3      	adds	r3, r2, r3
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0a1a      	lsrs	r2, r3, #8
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	23dc      	movs	r3, #220	; 0xdc
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	188a      	adds	r2, r1, r2
 8000fca:	18d3      	adds	r3, r2, r3
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	0c1a      	lsrs	r2, r3, #16
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	23dc      	movs	r3, #220	; 0xdc
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	188a      	adds	r2, r1, r2
 8000fe6:	18d3      	adds	r3, r2, r3
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0e1a      	lsrs	r2, r3, #24
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	3303      	adds	r3, #3
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6819      	ldr	r1, [r3, #0]
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	23de      	movs	r3, #222	; 0xde
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	188a      	adds	r2, r1, r2
 8001002:	18d3      	adds	r3, r2, r3
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	3304      	adds	r3, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6819      	ldr	r1, [r3, #0]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	23de      	movs	r3, #222	; 0xde
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	188a      	adds	r2, r1, r2
 800101c:	18d3      	adds	r3, r2, r3
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0a1a      	lsrs	r2, r3, #8
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	3305      	adds	r3, #5
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6819      	ldr	r1, [r3, #0]
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	23de      	movs	r3, #222	; 0xde
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	188a      	adds	r2, r1, r2
 8001038:	18d3      	adds	r3, r2, r3
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	0c1a      	lsrs	r2, r3, #16
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3306      	adds	r3, #6
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	23de      	movs	r3, #222	; 0xde
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	188a      	adds	r2, r1, r2
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0e1a      	lsrs	r2, r3, #24
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3307      	adds	r3, #7
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d108      	bne.n	800107a <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68da      	ldr	r2, [r3, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2120      	movs	r1, #32
 8001074:	430a      	orrs	r2, r1
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	e007      	b.n	800108a <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2120      	movs	r1, #32
 8001086:	430a      	orrs	r2, r1
 8001088:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e007      	b.n	800109e <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	2280      	movs	r2, #128	; 0x80
 8001094:	02d2      	lsls	r2, r2, #11
 8001096:	431a      	orrs	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
  }
}
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b006      	add	sp, #24
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010b0:	200f      	movs	r0, #15
 80010b2:	183b      	adds	r3, r7, r0
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	2120      	movs	r1, #32
 80010b8:	5c52      	ldrb	r2, [r2, r1]
 80010ba:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010bc:	183b      	adds	r3, r7, r0
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d004      	beq.n	80010ce <HAL_CAN_ActivateNotification+0x28>
 80010c4:	230f      	movs	r3, #15
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d109      	bne.n	80010e2 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6959      	ldr	r1, [r3, #20]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e007      	b.n	80010f2 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	02d2      	lsls	r2, r2, #11
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
  }
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b004      	add	sp, #16
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b08a      	sub	sp, #40	; 0x28
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	2201      	movs	r2, #1
 800113a:	4013      	ands	r3, r2
 800113c:	d100      	bne.n	8001140 <HAL_CAN_IRQHandler+0x46>
 800113e:	e084      	b.n	800124a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2201      	movs	r2, #1
 8001144:	4013      	ands	r3, r2
 8001146:	d024      	beq.n	8001192 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2201      	movs	r2, #1
 800114e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d004      	beq.n	8001162 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	0018      	movs	r0, r3
 800115c:	f000 f97e 	bl	800145c <HAL_CAN_TxMailbox0CompleteCallback>
 8001160:	e017      	b.n	8001192 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2204      	movs	r2, #4
 8001166:	4013      	ands	r3, r2
 8001168:	d005      	beq.n	8001176 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	4313      	orrs	r3, r2
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
 8001174:	e00d      	b.n	8001192 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2208      	movs	r2, #8
 800117a:	4013      	ands	r3, r2
 800117c:	d005      	beq.n	800118a <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	0152      	lsls	r2, r2, #5
 8001184:	4313      	orrs	r3, r2
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
 8001188:	e003      	b.n	8001192 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 f97d 	bl	800148c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4013      	ands	r3, r2
 800119a:	d028      	beq.n	80011ee <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	0052      	lsls	r2, r2, #1
 80011a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4013      	ands	r3, r2
 80011ae:	d004      	beq.n	80011ba <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 f95a 	bl	800146c <HAL_CAN_TxMailbox1CompleteCallback>
 80011b8:	e019      	b.n	80011ee <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4013      	ands	r3, r2
 80011c2:	d005      	beq.n	80011d0 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	0192      	lsls	r2, r2, #6
 80011ca:	4313      	orrs	r3, r2
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
 80011ce:	e00e      	b.n	80011ee <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4013      	ands	r3, r2
 80011d8:	d005      	beq.n	80011e6 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	01d2      	lsls	r2, r2, #7
 80011e0:	4313      	orrs	r3, r2
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
 80011e4:	e003      	b.n	80011ee <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 f957 	bl	800149c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	4013      	ands	r3, r2
 80011f6:	d028      	beq.n	800124a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	0252      	lsls	r2, r2, #9
 8001200:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	029b      	lsls	r3, r3, #10
 8001208:	4013      	ands	r3, r2
 800120a:	d004      	beq.n	8001216 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	0018      	movs	r0, r3
 8001210:	f000 f934 	bl	800147c <HAL_CAN_TxMailbox2CompleteCallback>
 8001214:	e019      	b.n	800124a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	02db      	lsls	r3, r3, #11
 800121c:	4013      	ands	r3, r2
 800121e:	d005      	beq.n	800122c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	0212      	lsls	r2, r2, #8
 8001226:	4313      	orrs	r3, r2
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
 800122a:	e00e      	b.n	800124a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	031b      	lsls	r3, r3, #12
 8001232:	4013      	ands	r3, r2
 8001234:	d005      	beq.n	8001242 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	0252      	lsls	r2, r2, #9
 800123c:	4313      	orrs	r3, r2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
 8001240:	e003      	b.n	800124a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f000 f931 	bl	80014ac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	2208      	movs	r2, #8
 800124e:	4013      	ands	r3, r2
 8001250:	d00c      	beq.n	800126c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2210      	movs	r2, #16
 8001256:	4013      	ands	r3, r2
 8001258:	d008      	beq.n	800126c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4313      	orrs	r3, r2
 8001262:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2210      	movs	r2, #16
 800126a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	2204      	movs	r2, #4
 8001270:	4013      	ands	r3, r2
 8001272:	d00b      	beq.n	800128c <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2208      	movs	r2, #8
 8001278:	4013      	ands	r3, r2
 800127a:	d007      	beq.n	800128c <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2208      	movs	r2, #8
 8001282:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	0018      	movs	r0, r3
 8001288:	f000 f918 	bl	80014bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	2202      	movs	r2, #2
 8001290:	4013      	ands	r3, r2
 8001292:	d009      	beq.n	80012a8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2203      	movs	r2, #3
 800129c:	4013      	ands	r3, r2
 800129e:	d003      	beq.n	80012a8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff f82c 	bl	8000300 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	2240      	movs	r2, #64	; 0x40
 80012ac:	4013      	ands	r3, r2
 80012ae:	d00c      	beq.n	80012ca <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	2210      	movs	r2, #16
 80012b4:	4013      	ands	r3, r2
 80012b6:	d008      	beq.n	80012ca <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	00d2      	lsls	r2, r2, #3
 80012be:	4313      	orrs	r3, r2
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2210      	movs	r2, #16
 80012c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	2220      	movs	r2, #32
 80012ce:	4013      	ands	r3, r2
 80012d0:	d00b      	beq.n	80012ea <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2208      	movs	r2, #8
 80012d6:	4013      	ands	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2208      	movs	r2, #8
 80012e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	0018      	movs	r0, r3
 80012e6:	f000 f8f9 	bl	80014dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	2210      	movs	r2, #16
 80012ee:	4013      	ands	r3, r2
 80012f0:	d009      	beq.n	8001306 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	2203      	movs	r2, #3
 80012fa:	4013      	ands	r3, r2
 80012fc:	d003      	beq.n	8001306 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	0018      	movs	r0, r3
 8001302:	f000 f8e3 	bl	80014cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001306:	6a3a      	ldr	r2, [r7, #32]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	029b      	lsls	r3, r3, #10
 800130c:	4013      	ands	r3, r2
 800130e:	d00b      	beq.n	8001328 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	2210      	movs	r2, #16
 8001314:	4013      	ands	r3, r2
 8001316:	d007      	beq.n	8001328 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2210      	movs	r2, #16
 800131e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	0018      	movs	r0, r3
 8001324:	f000 f8e2 	bl	80014ec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001328:	6a3a      	ldr	r2, [r7, #32]
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	025b      	lsls	r3, r3, #9
 800132e:	4013      	ands	r3, r2
 8001330:	d00b      	beq.n	800134a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	2208      	movs	r2, #8
 8001336:	4013      	ands	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2208      	movs	r2, #8
 8001340:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0018      	movs	r0, r3
 8001346:	f000 f8d9 	bl	80014fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800134a:	6a3a      	ldr	r2, [r7, #32]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	4013      	ands	r3, r2
 8001352:	d100      	bne.n	8001356 <HAL_CAN_IRQHandler+0x25c>
 8001354:	e071      	b.n	800143a <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	2204      	movs	r2, #4
 800135a:	4013      	ands	r3, r2
 800135c:	d100      	bne.n	8001360 <HAL_CAN_IRQHandler+0x266>
 800135e:	e068      	b.n	8001432 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001360:	6a3a      	ldr	r2, [r7, #32]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4013      	ands	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2201      	movs	r2, #1
 800136e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001370:	d003      	beq.n	800137a <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	2201      	movs	r2, #1
 8001376:	4313      	orrs	r3, r2
 8001378:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800137a:	6a3a      	ldr	r2, [r7, #32]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4013      	ands	r3, r2
 8001382:	d007      	beq.n	8001394 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800138a:	d003      	beq.n	8001394 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	2202      	movs	r2, #2
 8001390:	4313      	orrs	r3, r2
 8001392:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001394:	6a3a      	ldr	r2, [r7, #32]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4013      	ands	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2204      	movs	r2, #4
 80013a2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013a4:	d003      	beq.n	80013ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	2204      	movs	r2, #4
 80013aa:	4313      	orrs	r3, r2
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013ae:	6a3a      	ldr	r2, [r7, #32]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4013      	ands	r3, r2
 80013b6:	d03c      	beq.n	8001432 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2270      	movs	r2, #112	; 0x70
 80013bc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013be:	d038      	beq.n	8001432 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2270      	movs	r2, #112	; 0x70
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b30      	cmp	r3, #48	; 0x30
 80013c8:	d016      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x2fe>
 80013ca:	d804      	bhi.n	80013d6 <HAL_CAN_IRQHandler+0x2dc>
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	d009      	beq.n	80013e4 <HAL_CAN_IRQHandler+0x2ea>
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	d00c      	beq.n	80013ee <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013d4:	e025      	b.n	8001422 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 80013d6:	2b50      	cmp	r3, #80	; 0x50
 80013d8:	d018      	beq.n	800140c <HAL_CAN_IRQHandler+0x312>
 80013da:	2b60      	cmp	r3, #96	; 0x60
 80013dc:	d01b      	beq.n	8001416 <HAL_CAN_IRQHandler+0x31c>
 80013de:	2b40      	cmp	r3, #64	; 0x40
 80013e0:	d00f      	beq.n	8001402 <HAL_CAN_IRQHandler+0x308>
            break;
 80013e2:	e01e      	b.n	8001422 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	2208      	movs	r2, #8
 80013e8:	4313      	orrs	r3, r2
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013ec:	e019      	b.n	8001422 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	2210      	movs	r2, #16
 80013f2:	4313      	orrs	r3, r2
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013f6:	e014      	b.n	8001422 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2220      	movs	r2, #32
 80013fc:	4313      	orrs	r3, r2
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001400:	e00f      	b.n	8001422 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	2240      	movs	r2, #64	; 0x40
 8001406:	4313      	orrs	r3, r2
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800140a:	e00a      	b.n	8001422 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	4313      	orrs	r3, r2
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001414:	e005      	b.n	8001422 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	2280      	movs	r2, #128	; 0x80
 800141a:	0052      	lsls	r2, r2, #1
 800141c:	4313      	orrs	r3, r2
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001420:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699a      	ldr	r2, [r3, #24]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2170      	movs	r1, #112	; 0x70
 800142e:	438a      	bics	r2, r1
 8001430:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2204      	movs	r2, #4
 8001438:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	2b00      	cmp	r3, #0
 800143e:	d009      	beq.n	8001454 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	0018      	movs	r0, r3
 8001450:	f000 f85c 	bl	800150c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b00a      	add	sp, #40	; 0x28
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b002      	add	sp, #8
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b002      	add	sp, #8
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b002      	add	sp, #8
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}

0800151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	0002      	movs	r2, r0
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b7f      	cmp	r3, #127	; 0x7f
 800152e:	d809      	bhi.n	8001544 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	001a      	movs	r2, r3
 8001536:	231f      	movs	r3, #31
 8001538:	401a      	ands	r2, r3
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_EnableIRQ+0x30>)
 800153c:	2101      	movs	r1, #1
 800153e:	4091      	lsls	r1, r2
 8001540:	000a      	movs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
  }
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b002      	add	sp, #8
 800154a:	bd80      	pop	{r7, pc}
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	0002      	movs	r2, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b7f      	cmp	r3, #127	; 0x7f
 8001564:	d828      	bhi.n	80015b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001566:	4a2f      	ldr	r2, [pc, #188]	; (8001624 <__NVIC_SetPriority+0xd4>)
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	33c0      	adds	r3, #192	; 0xc0
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	589b      	ldr	r3, [r3, r2]
 8001576:	1dfa      	adds	r2, r7, #7
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	0011      	movs	r1, r2
 800157c:	2203      	movs	r2, #3
 800157e:	400a      	ands	r2, r1
 8001580:	00d2      	lsls	r2, r2, #3
 8001582:	21ff      	movs	r1, #255	; 0xff
 8001584:	4091      	lsls	r1, r2
 8001586:	000a      	movs	r2, r1
 8001588:	43d2      	mvns	r2, r2
 800158a:	401a      	ands	r2, r3
 800158c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	019b      	lsls	r3, r3, #6
 8001592:	22ff      	movs	r2, #255	; 0xff
 8001594:	401a      	ands	r2, r3
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	0018      	movs	r0, r3
 800159c:	2303      	movs	r3, #3
 800159e:	4003      	ands	r3, r0
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a4:	481f      	ldr	r0, [pc, #124]	; (8001624 <__NVIC_SetPriority+0xd4>)
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	430a      	orrs	r2, r1
 80015b0:	33c0      	adds	r3, #192	; 0xc0
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015b6:	e031      	b.n	800161c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b8:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <__NVIC_SetPriority+0xd8>)
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	0019      	movs	r1, r3
 80015c0:	230f      	movs	r3, #15
 80015c2:	400b      	ands	r3, r1
 80015c4:	3b08      	subs	r3, #8
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3306      	adds	r3, #6
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	18d3      	adds	r3, r2, r3
 80015ce:	3304      	adds	r3, #4
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	1dfa      	adds	r2, r7, #7
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	0011      	movs	r1, r2
 80015d8:	2203      	movs	r2, #3
 80015da:	400a      	ands	r2, r1
 80015dc:	00d2      	lsls	r2, r2, #3
 80015de:	21ff      	movs	r1, #255	; 0xff
 80015e0:	4091      	lsls	r1, r2
 80015e2:	000a      	movs	r2, r1
 80015e4:	43d2      	mvns	r2, r2
 80015e6:	401a      	ands	r2, r3
 80015e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	401a      	ands	r2, r3
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	0018      	movs	r0, r3
 80015f8:	2303      	movs	r3, #3
 80015fa:	4003      	ands	r3, r0
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <__NVIC_SetPriority+0xd8>)
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	001c      	movs	r4, r3
 8001608:	230f      	movs	r3, #15
 800160a:	4023      	ands	r3, r4
 800160c:	3b08      	subs	r3, #8
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	430a      	orrs	r2, r1
 8001612:	3306      	adds	r3, #6
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	18c3      	adds	r3, r0, r3
 8001618:	3304      	adds	r3, #4
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b003      	add	sp, #12
 8001622:	bd90      	pop	{r4, r7, pc}
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	4a0c      	ldr	r2, [pc, #48]	; (800166c <SysTick_Config+0x40>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e010      	b.n	8001664 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <SysTick_Config+0x44>)
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	3a01      	subs	r2, #1
 8001648:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	2301      	movs	r3, #1
 800164c:	425b      	negs	r3, r3
 800164e:	2103      	movs	r1, #3
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff ff7d 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <SysTick_Config+0x44>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SysTick_Config+0x44>)
 800165e:	2207      	movs	r2, #7
 8001660:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001662:	2300      	movs	r3, #0
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}
 800166c:	00ffffff 	.word	0x00ffffff
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	210f      	movs	r1, #15
 8001680:	187b      	adds	r3, r7, r1
 8001682:	1c02      	adds	r2, r0, #0
 8001684:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	187b      	adds	r3, r7, r1
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	0011      	movs	r1, r2
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff ff5d 	bl	8001550 <__NVIC_SetPriority>
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	0002      	movs	r2, r0
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff ff33 	bl	800151c <__NVIC_EnableIRQ>
}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b002      	add	sp, #8
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff ffaf 	bl	800162c <SysTick_Config>
 80016ce:	0003      	movs	r3, r0
}
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e149      	b.n	800197c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4091      	lsls	r1, r2
 80016f2:	000a      	movs	r2, r1
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d100      	bne.n	8001700 <HAL_GPIO_Init+0x28>
 80016fe:	e13a      	b.n	8001976 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x38>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b12      	cmp	r3, #18
 800170e:	d123      	bne.n	8001758 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	58d3      	ldr	r3, [r2, r3]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2207      	movs	r2, #7
 8001722:	4013      	ands	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	409a      	lsls	r2, r3
 800172a:	0013      	movs	r3, r2
 800172c:	43da      	mvns	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2107      	movs	r1, #7
 800173c:	400b      	ands	r3, r1
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	409a      	lsls	r2, r3
 8001742:	0013      	movs	r3, r2
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	6939      	ldr	r1, [r7, #16]
 8001756:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	409a      	lsls	r2, r3
 8001766:	0013      	movs	r3, r2
 8001768:	43da      	mvns	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2203      	movs	r2, #3
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	409a      	lsls	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d00b      	beq.n	80017ac <HAL_GPIO_Init+0xd4>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a0:	2b11      	cmp	r3, #17
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b12      	cmp	r3, #18
 80017aa:	d130      	bne.n	800180e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	43da      	mvns	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e2:	2201      	movs	r2, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
 80017e8:	0013      	movs	r3, r2
 80017ea:	43da      	mvns	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	2201      	movs	r2, #1
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	43da      	mvns	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	055b      	lsls	r3, r3, #21
 8001846:	4013      	ands	r3, r2
 8001848:	d100      	bne.n	800184c <HAL_GPIO_Init+0x174>
 800184a:	e094      	b.n	8001976 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184c:	4b51      	ldr	r3, [pc, #324]	; (8001994 <HAL_GPIO_Init+0x2bc>)
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_GPIO_Init+0x2bc>)
 8001852:	2101      	movs	r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	619a      	str	r2, [r3, #24]
 8001858:	4b4e      	ldr	r3, [pc, #312]	; (8001994 <HAL_GPIO_Init+0x2bc>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	589b      	ldr	r3, [r3, r2]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2203      	movs	r2, #3
 8001876:	4013      	ands	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	409a      	lsls	r2, r3
 800187e:	0013      	movs	r3, r2
 8001880:	43da      	mvns	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	2390      	movs	r3, #144	; 0x90
 800188c:	05db      	lsls	r3, r3, #23
 800188e:	429a      	cmp	r2, r3
 8001890:	d00d      	beq.n	80018ae <HAL_GPIO_Init+0x1d6>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a41      	ldr	r2, [pc, #260]	; (800199c <HAL_GPIO_Init+0x2c4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_Init+0x1d2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a40      	ldr	r2, [pc, #256]	; (80019a0 <HAL_GPIO_Init+0x2c8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_GPIO_Init+0x1ce>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e004      	b.n	80018b0 <HAL_GPIO_Init+0x1d8>
 80018a6:	2305      	movs	r3, #5
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x1d8>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x1d8>
 80018ae:	2300      	movs	r3, #0
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	2103      	movs	r1, #3
 80018b4:	400a      	ands	r2, r1
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	4093      	lsls	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018c0:	4935      	ldr	r1, [pc, #212]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ce:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43da      	mvns	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	025b      	lsls	r3, r3, #9
 80018e6:	4013      	ands	r3, r2
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018f2:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43da      	mvns	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	029b      	lsls	r3, r3, #10
 8001910:	4013      	ands	r3, r2
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43da      	mvns	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	035b      	lsls	r3, r3, #13
 800193a:	4013      	ands	r3, r2
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43da      	mvns	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	039b      	lsls	r3, r3, #14
 8001964:	4013      	ands	r3, r2
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	40da      	lsrs	r2, r3
 8001984:	1e13      	subs	r3, r2, #0
 8001986:	d000      	beq.n	800198a <HAL_GPIO_Init+0x2b2>
 8001988:	e6ae      	b.n	80016e8 <HAL_GPIO_Init+0x10>
  } 
}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b006      	add	sp, #24
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000
 800199c:	48000400 	.word	0x48000400
 80019a0:	48000800 	.word	0x48000800
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	0008      	movs	r0, r1
 80019b2:	0011      	movs	r1, r2
 80019b4:	1cbb      	adds	r3, r7, #2
 80019b6:	1c02      	adds	r2, r0, #0
 80019b8:	801a      	strh	r2, [r3, #0]
 80019ba:	1c7b      	adds	r3, r7, #1
 80019bc:	1c0a      	adds	r2, r1, #0
 80019be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c0:	1c7b      	adds	r3, r7, #1
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019c8:	1cbb      	adds	r3, r7, #2
 80019ca:	881a      	ldrh	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d0:	e003      	b.n	80019da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019d2:	1cbb      	adds	r3, r7, #2
 80019d4:	881a      	ldrh	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	000a      	movs	r2, r1
 80019ec:	1cbb      	adds	r3, r7, #2
 80019ee:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	1cba      	adds	r2, r7, #2
 80019f6:	8812      	ldrh	r2, [r2, #0]
 80019f8:	4013      	ands	r3, r2
 80019fa:	d005      	beq.n	8001a08 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019fc:	1cbb      	adds	r3, r7, #2
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	041a      	lsls	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001a06:	e003      	b.n	8001a10 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	881a      	ldrh	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	f000 fb76 	bl	8002118 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	d100      	bne.n	8001a38 <HAL_RCC_OscConfig+0x20>
 8001a36:	e08e      	b.n	8001b56 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a38:	4bc5      	ldr	r3, [pc, #788]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	220c      	movs	r2, #12
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d00e      	beq.n	8001a62 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a44:	4bc2      	ldr	r3, [pc, #776]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	220c      	movs	r2, #12
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d117      	bne.n	8001a80 <HAL_RCC_OscConfig+0x68>
 8001a50:	4bbf      	ldr	r3, [pc, #764]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	23c0      	movs	r3, #192	; 0xc0
 8001a56:	025b      	lsls	r3, r3, #9
 8001a58:	401a      	ands	r2, r3
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	025b      	lsls	r3, r3, #9
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d10e      	bne.n	8001a80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a62:	4bbb      	ldr	r3, [pc, #748]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	029b      	lsls	r3, r3, #10
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d100      	bne.n	8001a70 <HAL_RCC_OscConfig+0x58>
 8001a6e:	e071      	b.n	8001b54 <HAL_RCC_OscConfig+0x13c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d000      	beq.n	8001a7a <HAL_RCC_OscConfig+0x62>
 8001a78:	e06c      	b.n	8001b54 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f000 fb4c 	bl	8002118 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_OscConfig+0x80>
 8001a88:	4bb1      	ldr	r3, [pc, #708]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4bb0      	ldr	r3, [pc, #704]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	0249      	lsls	r1, r1, #9
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e02f      	b.n	8001af8 <HAL_RCC_OscConfig+0xe0>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0xa2>
 8001aa0:	4bab      	ldr	r3, [pc, #684]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4baa      	ldr	r3, [pc, #680]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001aa6:	49ab      	ldr	r1, [pc, #684]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	4ba8      	ldr	r3, [pc, #672]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4ba7      	ldr	r3, [pc, #668]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001ab2:	49a9      	ldr	r1, [pc, #676]	; (8001d58 <HAL_RCC_OscConfig+0x340>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e01e      	b.n	8001af8 <HAL_RCC_OscConfig+0xe0>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b05      	cmp	r3, #5
 8001ac0:	d10e      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xc8>
 8001ac2:	4ba3      	ldr	r3, [pc, #652]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4ba2      	ldr	r3, [pc, #648]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	02c9      	lsls	r1, r1, #11
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	4b9f      	ldr	r3, [pc, #636]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	0249      	lsls	r1, r1, #9
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0xe0>
 8001ae0:	4b9b      	ldr	r3, [pc, #620]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b9a      	ldr	r3, [pc, #616]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	499b      	ldr	r1, [pc, #620]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	4b98      	ldr	r3, [pc, #608]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b97      	ldr	r3, [pc, #604]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001af2:	4999      	ldr	r1, [pc, #612]	; (8001d58 <HAL_RCC_OscConfig+0x340>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d014      	beq.n	8001b2a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7fe fe3c 	bl	800077c <HAL_GetTick>
 8001b04:	0003      	movs	r3, r0
 8001b06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0a:	f7fe fe37 	bl	800077c <HAL_GetTick>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b64      	cmp	r3, #100	; 0x64
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e2fd      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1c:	4b8c      	ldr	r3, [pc, #560]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	029b      	lsls	r3, r3, #10
 8001b24:	4013      	ands	r3, r2
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0xf2>
 8001b28:	e015      	b.n	8001b56 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7fe fe27 	bl	800077c <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b34:	f7fe fe22 	bl	800077c <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e2e8      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	029b      	lsls	r3, r3, #10
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x11c>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d100      	bne.n	8001b62 <HAL_RCC_OscConfig+0x14a>
 8001b60:	e06c      	b.n	8001c3c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b62:	4b7b      	ldr	r3, [pc, #492]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	220c      	movs	r2, #12
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d00e      	beq.n	8001b8a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b6c:	4b78      	ldr	r3, [pc, #480]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	220c      	movs	r2, #12
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d11f      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x1a0>
 8001b78:	4b75      	ldr	r3, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	23c0      	movs	r3, #192	; 0xc0
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	401a      	ands	r2, r3
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d116      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	4013      	ands	r3, r2
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x188>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e2bb      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b6b      	ldr	r3, [pc, #428]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	22f8      	movs	r2, #248	; 0xf8
 8001ba6:	4393      	bics	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00da      	lsls	r2, r3, #3
 8001bb0:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	e041      	b.n	8001c3c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d024      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc0:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7fe fdd6 	bl	800077c <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd6:	f7fe fdd1 	bl	800077c <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e297      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d0f1      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	22f8      	movs	r2, #248	; 0xf8
 8001bf8:	4393      	bics	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	00da      	lsls	r2, r3, #3
 8001c02:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e018      	b.n	8001c3c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0a:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001c10:	2101      	movs	r1, #1
 8001c12:	438a      	bics	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7fe fdb1 	bl	800077c <HAL_GetTick>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c20:	f7fe fdac 	bl	800077c <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e272      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2202      	movs	r2, #2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d1f1      	bne.n	8001c20 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2208      	movs	r2, #8
 8001c42:	4013      	ands	r3, r2
 8001c44:	d036      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d019      	beq.n	8001c82 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	430a      	orrs	r2, r1
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5a:	f7fe fd8f 	bl	800077c <HAL_GetTick>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c64:	f7fe fd8a 	bl	800077c <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e250      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d0f1      	beq.n	8001c64 <HAL_RCC_OscConfig+0x24c>
 8001c80:	e018      	b.n	8001cb4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c82:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	438a      	bics	r2, r1
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7fe fd75 	bl	800077c <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c98:	f7fe fd70 	bl	800077c <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e236      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d1f1      	bne.n	8001c98 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d100      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2a8>
 8001cbe:	e0b5      	b.n	8001e2c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc0:	231f      	movs	r3, #31
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	055b      	lsls	r3, r3, #21
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d111      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	69da      	ldr	r2, [r3, #28]
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	0549      	lsls	r1, r1, #21
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	61da      	str	r2, [r3, #28]
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	055b      	lsls	r3, r3, #21
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cf0:	231f      	movs	r3, #31
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_RCC_OscConfig+0x344>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	d11a      	bne.n	8001d3a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_RCC_OscConfig+0x344>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <HAL_RCC_OscConfig+0x344>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	0049      	lsls	r1, r1, #1
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d12:	f7fe fd33 	bl	800077c <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1c:	f7fe fd2e 	bl	800077c <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1f4      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_OscConfig+0x344>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10e      	bne.n	8001d60 <HAL_RCC_OscConfig+0x348>
 8001d42:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <HAL_RCC_OscConfig+0x338>)
 8001d48:	2101      	movs	r1, #1
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	621a      	str	r2, [r3, #32]
 8001d4e:	e035      	b.n	8001dbc <HAL_RCC_OscConfig+0x3a4>
 8001d50:	40021000 	.word	0x40021000
 8001d54:	fffeffff 	.word	0xfffeffff
 8001d58:	fffbffff 	.word	0xfffbffff
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10c      	bne.n	8001d82 <HAL_RCC_OscConfig+0x36a>
 8001d68:	4bca      	ldr	r3, [pc, #808]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001d6a:	6a1a      	ldr	r2, [r3, #32]
 8001d6c:	4bc9      	ldr	r3, [pc, #804]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	438a      	bics	r2, r1
 8001d72:	621a      	str	r2, [r3, #32]
 8001d74:	4bc7      	ldr	r3, [pc, #796]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001d76:	6a1a      	ldr	r2, [r3, #32]
 8001d78:	4bc6      	ldr	r3, [pc, #792]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	621a      	str	r2, [r3, #32]
 8001d80:	e01c      	b.n	8001dbc <HAL_RCC_OscConfig+0x3a4>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x38c>
 8001d8a:	4bc2      	ldr	r3, [pc, #776]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001d8c:	6a1a      	ldr	r2, [r3, #32]
 8001d8e:	4bc1      	ldr	r3, [pc, #772]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001d90:	2104      	movs	r1, #4
 8001d92:	430a      	orrs	r2, r1
 8001d94:	621a      	str	r2, [r3, #32]
 8001d96:	4bbf      	ldr	r3, [pc, #764]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	4bbe      	ldr	r3, [pc, #760]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	621a      	str	r2, [r3, #32]
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0x3a4>
 8001da4:	4bbb      	ldr	r3, [pc, #748]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	4bba      	ldr	r3, [pc, #744]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001daa:	2101      	movs	r1, #1
 8001dac:	438a      	bics	r2, r1
 8001dae:	621a      	str	r2, [r3, #32]
 8001db0:	4bb8      	ldr	r3, [pc, #736]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001db2:	6a1a      	ldr	r2, [r3, #32]
 8001db4:	4bb7      	ldr	r3, [pc, #732]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001db6:	2104      	movs	r1, #4
 8001db8:	438a      	bics	r2, r1
 8001dba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d014      	beq.n	8001dee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7fe fcda 	bl	800077c <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7fe fcd5 	bl	800077c <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4aaf      	ldr	r2, [pc, #700]	; (8002098 <HAL_RCC_OscConfig+0x680>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e19a      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de2:	4bac      	ldr	r3, [pc, #688]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x3b6>
 8001dec:	e013      	b.n	8001e16 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7fe fcc5 	bl	800077c <HAL_GetTick>
 8001df2:	0003      	movs	r3, r0
 8001df4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df6:	e009      	b.n	8001e0c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7fe fcc0 	bl	800077c <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	4aa5      	ldr	r2, [pc, #660]	; (8002098 <HAL_RCC_OscConfig+0x680>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e185      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	4ba1      	ldr	r3, [pc, #644]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	2202      	movs	r2, #2
 8001e12:	4013      	ands	r3, r2
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e16:	231f      	movs	r3, #31
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e20:	4b9c      	ldr	r3, [pc, #624]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	4b9b      	ldr	r3, [pc, #620]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e26:	499d      	ldr	r1, [pc, #628]	; (800209c <HAL_RCC_OscConfig+0x684>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2210      	movs	r2, #16
 8001e32:	4013      	ands	r3, r2
 8001e34:	d063      	beq.n	8001efe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d12a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e3e:	4b95      	ldr	r3, [pc, #596]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e42:	4b94      	ldr	r3, [pc, #592]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e44:	2104      	movs	r1, #4
 8001e46:	430a      	orrs	r2, r1
 8001e48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e4a:	4b92      	ldr	r3, [pc, #584]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e4e:	4b91      	ldr	r3, [pc, #580]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e50:	2101      	movs	r1, #1
 8001e52:	430a      	orrs	r2, r1
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7fe fc91 	bl	800077c <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e60:	f7fe fc8c 	bl	800077c <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e152      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e72:	4b88      	ldr	r3, [pc, #544]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	2202      	movs	r2, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d0f1      	beq.n	8001e60 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e7c:	4b85      	ldr	r3, [pc, #532]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e80:	22f8      	movs	r2, #248	; 0xf8
 8001e82:	4393      	bics	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	00da      	lsls	r2, r3, #3
 8001e8c:	4b81      	ldr	r3, [pc, #516]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
 8001e92:	e034      	b.n	8001efe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	3305      	adds	r3, #5
 8001e9a:	d111      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e9c:	4b7d      	ldr	r3, [pc, #500]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea0:	4b7c      	ldr	r3, [pc, #496]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	438a      	bics	r2, r1
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ea8:	4b7a      	ldr	r3, [pc, #488]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	22f8      	movs	r2, #248	; 0xf8
 8001eae:	4393      	bics	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	00da      	lsls	r2, r3, #3
 8001eb8:	4b76      	ldr	r3, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ebe:	e01e      	b.n	8001efe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ec0:	4b74      	ldr	r3, [pc, #464]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec4:	4b73      	ldr	r3, [pc, #460]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ecc:	4b71      	ldr	r3, [pc, #452]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed0:	4b70      	ldr	r3, [pc, #448]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7fe fc50 	bl	800077c <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ee2:	f7fe fc4b 	bl	800077c <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e111      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ef4:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d1f1      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2220      	movs	r2, #32
 8001f04:	4013      	ands	r3, r2
 8001f06:	d05c      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f08:	4b62      	ldr	r3, [pc, #392]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	220c      	movs	r2, #12
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b0c      	cmp	r3, #12
 8001f12:	d00e      	beq.n	8001f32 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f14:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	220c      	movs	r2, #12
 8001f1a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d114      	bne.n	8001f4a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f20:	4b5c      	ldr	r3, [pc, #368]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	23c0      	movs	r3, #192	; 0xc0
 8001f26:	025b      	lsls	r3, r3, #9
 8001f28:	401a      	ands	r2, r3
 8001f2a:	23c0      	movs	r3, #192	; 0xc0
 8001f2c:	025b      	lsls	r3, r3, #9
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d10b      	bne.n	8001f4a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f32:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	025b      	lsls	r3, r3, #9
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d040      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x5a8>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d03c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0e6      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f52:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f56:	4b4f      	ldr	r3, [pc, #316]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	0249      	lsls	r1, r1, #9
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7fe fc0c 	bl	800077c <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f6a:	f7fe fc07 	bl	800077c <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0cd      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f7c:	4b45      	ldr	r3, [pc, #276]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	025b      	lsls	r3, r3, #9
 8001f84:	4013      	ands	r3, r2
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x552>
 8001f88:	e01b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f8a:	4b42      	ldr	r3, [pc, #264]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001f90:	4943      	ldr	r1, [pc, #268]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe fbf1 	bl	800077c <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fa0:	f7fe fbec 	bl	800077c <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0b2      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001fb2:	4b38      	ldr	r3, [pc, #224]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x588>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fc0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d100      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5b4>
 8001fca:	e0a4      	b.n	8002116 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	220c      	movs	r2, #12
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d100      	bne.n	8001fda <HAL_RCC_OscConfig+0x5c2>
 8001fd8:	e078      	b.n	80020cc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d14c      	bne.n	800207c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8001fe8:	492e      	ldr	r1, [pc, #184]	; (80020a4 <HAL_RCC_OscConfig+0x68c>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe fbc5 	bl	800077c <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7fe fbc0 	bl	800077c <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e086      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	049b      	lsls	r3, r3, #18
 8002012:	4013      	ands	r3, r2
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	220f      	movs	r2, #15
 800201c:	4393      	bics	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8002026:	430a      	orrs	r2, r1
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <HAL_RCC_OscConfig+0x690>)
 8002030:	4013      	ands	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	431a      	orrs	r2, r3
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8002040:	430a      	orrs	r2, r1
 8002042:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0449      	lsls	r1, r1, #17
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7fe fb93 	bl	800077c <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe fb8e 	bl	800077c <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e054      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	049b      	lsls	r3, r3, #18
 8002076:	4013      	ands	r3, r2
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x644>
 800207a:	e04c      	b.n	8002116 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_RCC_OscConfig+0x67c>)
 8002082:	4908      	ldr	r1, [pc, #32]	; (80020a4 <HAL_RCC_OscConfig+0x68c>)
 8002084:	400a      	ands	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe fb78 	bl	800077c <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x6a6>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	40021000 	.word	0x40021000
 8002098:	00001388 	.word	0x00001388
 800209c:	efffffff 	.word	0xefffffff
 80020a0:	fffeffff 	.word	0xfffeffff
 80020a4:	feffffff 	.word	0xfeffffff
 80020a8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7fe fb66 	bl	800077c <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e02c      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_RCC_OscConfig+0x708>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	049b      	lsls	r3, r3, #18
 80020c6:	4013      	ands	r3, r2
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x694>
 80020ca:	e024      	b.n	8002116 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e01f      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_RCC_OscConfig+0x708>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_RCC_OscConfig+0x708>)
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	23c0      	movs	r3, #192	; 0xc0
 80020e8:	025b      	lsls	r3, r3, #9
 80020ea:	401a      	ands	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d10e      	bne.n	8002112 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	220f      	movs	r2, #15
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	23f0      	movs	r3, #240	; 0xf0
 8002106:	039b      	lsls	r3, r3, #14
 8002108:	401a      	ands	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	b008      	add	sp, #32
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0bf      	b.n	80022b8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b61      	ldr	r3, [pc, #388]	; (80022c0 <HAL_RCC_ClockConfig+0x19c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	4013      	ands	r3, r2
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d911      	bls.n	800216a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCC_ClockConfig+0x19c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2201      	movs	r2, #1
 800214c:	4393      	bics	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <HAL_RCC_ClockConfig+0x19c>)
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002158:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_RCC_ClockConfig+0x19c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0a6      	b.n	80022b8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d015      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2204      	movs	r2, #4
 800217a:	4013      	ands	r3, r2
 800217c:	d006      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800217e:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002184:	21e0      	movs	r1, #224	; 0xe0
 8002186:	00c9      	lsls	r1, r1, #3
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b4d      	ldr	r3, [pc, #308]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	22f0      	movs	r2, #240	; 0xf0
 8002192:	4393      	bics	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	4b4a      	ldr	r3, [pc, #296]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2201      	movs	r2, #1
 80021a6:	4013      	ands	r3, r2
 80021a8:	d04c      	beq.n	8002244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	029b      	lsls	r3, r3, #10
 80021ba:	4013      	ands	r3, r2
 80021bc:	d120      	bne.n	8002200 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07a      	b.n	80022b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	049b      	lsls	r3, r3, #18
 80021d2:	4013      	ands	r3, r2
 80021d4:	d114      	bne.n	8002200 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06e      	b.n	80022b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 80021e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	025b      	lsls	r3, r3, #9
 80021ea:	4013      	ands	r3, r2
 80021ec:	d108      	bne.n	8002200 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e062      	b.n	80022b8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f2:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2202      	movs	r2, #2
 80021f8:	4013      	ands	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e05b      	b.n	80022b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2203      	movs	r2, #3
 8002206:	4393      	bics	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002214:	f7fe fab2 	bl	800077c <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221c:	e009      	b.n	8002232 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221e:	f7fe faad 	bl	800077c <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <HAL_RCC_ClockConfig+0x1a4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e042      	b.n	80022b8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	220c      	movs	r2, #12
 8002238:	401a      	ands	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	429a      	cmp	r2, r3
 8002242:	d1ec      	bne.n	800221e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_ClockConfig+0x19c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	4013      	ands	r3, r2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d211      	bcs.n	8002276 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCC_ClockConfig+0x19c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2201      	movs	r2, #1
 8002258:	4393      	bics	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_RCC_ClockConfig+0x19c>)
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_RCC_ClockConfig+0x19c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	4013      	ands	r3, r2
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d001      	beq.n	8002276 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e020      	b.n	80022b8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2204      	movs	r2, #4
 800227c:	4013      	ands	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002280:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_RCC_ClockConfig+0x1a8>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002294:	f000 f820 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002298:	0001      	movs	r1, r0
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_RCC_ClockConfig+0x1a0>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	220f      	movs	r2, #15
 80022a2:	4013      	ands	r3, r2
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1ac>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	000a      	movs	r2, r1
 80022aa:	40da      	lsrs	r2, r3
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1b0>)
 80022ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7fe fa1d 	bl	80006f0 <HAL_InitTick>
  
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b004      	add	sp, #16
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40022000 	.word	0x40022000
 80022c4:	40021000 	.word	0x40021000
 80022c8:	00001388 	.word	0x00001388
 80022cc:	fffff8ff 	.word	0xfffff8ff
 80022d0:	08002464 	.word	0x08002464
 80022d4:	20000000 	.word	0x20000000

080022d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b08f      	sub	sp, #60	; 0x3c
 80022dc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80022de:	2314      	movs	r3, #20
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	4a37      	ldr	r2, [pc, #220]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xe8>)
 80022e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022e6:	c313      	stmia	r3!, {r0, r1, r4}
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	4a35      	ldr	r2, [pc, #212]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xec>)
 80022f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022f2:	c313      	stmia	r3!, {r0, r1, r4}
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002300:	2300      	movs	r3, #0
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	220c      	movs	r2, #12
 8002316:	4013      	ands	r3, r2
 8002318:	2b08      	cmp	r3, #8
 800231a:	d006      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x52>
 800231c:	2b0c      	cmp	r3, #12
 800231e:	d043      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0xd0>
 8002320:	2b04      	cmp	r3, #4
 8002322:	d144      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002328:	e044      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	220f      	movs	r2, #15
 8002330:	4013      	ands	r3, r2
 8002332:	2214      	movs	r2, #20
 8002334:	18ba      	adds	r2, r7, r2
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800233a:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	220f      	movs	r2, #15
 8002340:	4013      	ands	r3, r2
 8002342:	1d3a      	adds	r2, r7, #4
 8002344:	5cd3      	ldrb	r3, [r2, r3]
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234a:	23c0      	movs	r3, #192	; 0xc0
 800234c:	025b      	lsls	r3, r3, #9
 800234e:	401a      	ands	r2, r3
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	025b      	lsls	r3, r3, #9
 8002354:	429a      	cmp	r2, r3
 8002356:	d109      	bne.n	800236c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235a:	481c      	ldr	r0, [pc, #112]	; (80023cc <HAL_RCC_GetSysClockFreq+0xf4>)
 800235c:	f7fd fed4 	bl	8000108 <__udivsi3>
 8002360:	0003      	movs	r3, r0
 8002362:	001a      	movs	r2, r3
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	4353      	muls	r3, r2
 8002368:	637b      	str	r3, [r7, #52]	; 0x34
 800236a:	e01a      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800236c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800236e:	23c0      	movs	r3, #192	; 0xc0
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	401a      	ands	r2, r3
 8002374:	23c0      	movs	r3, #192	; 0xc0
 8002376:	025b      	lsls	r3, r3, #9
 8002378:	429a      	cmp	r2, r3
 800237a:	d109      	bne.n	8002390 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800237c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800237e:	4814      	ldr	r0, [pc, #80]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002380:	f7fd fec2 	bl	8000108 <__udivsi3>
 8002384:	0003      	movs	r3, r0
 8002386:	001a      	movs	r2, r3
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	4353      	muls	r3, r2
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
 800238e:	e008      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002392:	480e      	ldr	r0, [pc, #56]	; (80023cc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002394:	f7fd feb8 	bl	8000108 <__udivsi3>
 8002398:	0003      	movs	r3, r0
 800239a:	001a      	movs	r2, r3
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	4353      	muls	r3, r2
 80023a0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023a6:	e005      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023ac:	e002      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_RCC_GetSysClockFreq+0xf4>)
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b00f      	add	sp, #60	; 0x3c
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	08002444 	.word	0x08002444
 80023c4:	08002454 	.word	0x08002454
 80023c8:	40021000 	.word	0x40021000
 80023cc:	007a1200 	.word	0x007a1200
 80023d0:	02dc6c00 	.word	0x02dc6c00

080023d4 <__libc_init_array>:
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	2600      	movs	r6, #0
 80023d8:	4d0c      	ldr	r5, [pc, #48]	; (800240c <__libc_init_array+0x38>)
 80023da:	4c0d      	ldr	r4, [pc, #52]	; (8002410 <__libc_init_array+0x3c>)
 80023dc:	1b64      	subs	r4, r4, r5
 80023de:	10a4      	asrs	r4, r4, #2
 80023e0:	42a6      	cmp	r6, r4
 80023e2:	d109      	bne.n	80023f8 <__libc_init_array+0x24>
 80023e4:	2600      	movs	r6, #0
 80023e6:	f000 f821 	bl	800242c <_init>
 80023ea:	4d0a      	ldr	r5, [pc, #40]	; (8002414 <__libc_init_array+0x40>)
 80023ec:	4c0a      	ldr	r4, [pc, #40]	; (8002418 <__libc_init_array+0x44>)
 80023ee:	1b64      	subs	r4, r4, r5
 80023f0:	10a4      	asrs	r4, r4, #2
 80023f2:	42a6      	cmp	r6, r4
 80023f4:	d105      	bne.n	8002402 <__libc_init_array+0x2e>
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
 80023f8:	00b3      	lsls	r3, r6, #2
 80023fa:	58eb      	ldr	r3, [r5, r3]
 80023fc:	4798      	blx	r3
 80023fe:	3601      	adds	r6, #1
 8002400:	e7ee      	b.n	80023e0 <__libc_init_array+0xc>
 8002402:	00b3      	lsls	r3, r6, #2
 8002404:	58eb      	ldr	r3, [r5, r3]
 8002406:	4798      	blx	r3
 8002408:	3601      	adds	r6, #1
 800240a:	e7f2      	b.n	80023f2 <__libc_init_array+0x1e>
 800240c:	08002474 	.word	0x08002474
 8002410:	08002474 	.word	0x08002474
 8002414:	08002474 	.word	0x08002474
 8002418:	08002478 	.word	0x08002478

0800241c <memset>:
 800241c:	0003      	movs	r3, r0
 800241e:	1812      	adds	r2, r2, r0
 8002420:	4293      	cmp	r3, r2
 8002422:	d100      	bne.n	8002426 <memset+0xa>
 8002424:	4770      	bx	lr
 8002426:	7019      	strb	r1, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	e7f9      	b.n	8002420 <memset+0x4>

0800242c <_init>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002432:	bc08      	pop	{r3}
 8002434:	469e      	mov	lr, r3
 8002436:	4770      	bx	lr

08002438 <_fini>:
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243e:	bc08      	pop	{r3}
 8002440:	469e      	mov	lr, r3
 8002442:	4770      	bx	lr
